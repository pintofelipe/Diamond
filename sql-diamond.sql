-- Tabla 1: CUSTOMERS
CREATE TABLE DIAMOND.CUSTOMERS(
    id_customer VARCHAR(4),
    first_name VARCHAR(20), 
    last_name VARCHAR(20),
    phone VARCHAR(20),
    email VARCHAR(50),
    CONSTRAINT PK_CUSTOMERS PRIMARY KEY(id_customer),
    CONSTRAINT NN_CUSTOMERS_first_name CHECK (first_name IS NOT NULL),
    CONSTRAINT NN_CUSTOMERS_last_name CHECK (last_name IS NOT NULL),
    CONSTRAINT NN_CUSTOMERS_phone CHECK (phone IS NOT NULL),
	CONSTRAINT UQ_CUSTOMERS_email UNIQUE (email)
);


-- Tabla 2: EMPLOYEES (Implementación Tabla Única)
CREATE TABLE DIAMOND.EMPLOYEES(
    id_line_item VARCHAR(4),
    first_name VARCHAR(20),
    last_name VARCHAR(20),
    salary NUMERIC,
    employee_type VARCHAR(10),
    id_manager VARCHAR(4),
    CONSTRAINT PK_EMPLOYEES PRIMARY KEY(id_line_item),
    CONSTRAINT NN_EMPLOYEES_first_name CHECK (first_name IS NOT NULL),
    CONSTRAINT NN_EMPLOYEES_last_name CHECK (last_name IS NOT NULL),
	CONSTRAINT NN_EMPLOYEES_salary CHECK (salary IS NOT NULL),
    CONSTRAINT NN_employee_type CHECK (employee_type IS NOT NULL),
    CONSTRAINT FK_EMPLOYEES_MANAGER FOREIGN KEY (id_manager)
    REFERENCES DIAMOND.EMPLOYEES(id_line_item) --Auto referencia
);

--Tabla 6: PAYMENT_TYPES
CREATE TABLE DIAMOND.PAYMENT_TYPES (
    id_payment_type VARCHAR(4),
    name VARCHAR(40),
    CONSTRAINT PK_PAYMENT_TYPES PRIMARY KEY (id_payment_type),
    CONSTRAINT NN_PAYMENT_TYPES_name CHECK (name IS NOT NULL)
);

--Tabla 8: REGULARS
CREATE TABLE DIAMOND.REGULARS(
    id_regular VARCHAR(4),
    code VARCHAR(4),
    brand VARCHAR(20),
    CONSTRAINT PK_REGULARS PRIMARY KEY(id_regular),
    CONSTRAINT NN_brand CHECK (brand IS NOT NULL)
);


--Tabla 9: PROMOTIONS
CREATE TABLE DIAMOND.PROMOTIONS (
    id_promotion VARCHAR(2),
    start_date DATE,
    end_date DATE,
    code VARCHAR(4),
    details VARCHAR(100),
    CONSTRAINT PK_PROMOTIONS PRIMARY KEY(id_promotion),
    CONSTRAINT NN_start_date CHECK (start_date IS NOT NULL),
    CONSTRAINT NN_end_date CHECK (end_date IS NOT NULL),
    CONSTRAINT NN_PROMOTIONS_code CHECK (code IS NOT NULL)
);


--Tabla 10: CITIES
CREATE TABLE DIAMOND.CITIES (
    id_city VARCHAR(3),
    name VARCHAR(40), 
    CONSTRAINT PK_CITIES PRIMARY KEY (id_city),
    CONSTRAINT NN_CITIES_name CHECK (name IS NOT NULL)
);

--Table 12: SUPPLIERS
CREATE TABLE DIAMOND.SUPPLIERS (
    id_supplier VARCHAR(4),
    first_name VARCHAR(20),
    last_name VARCHAR(15),
    contact VARCHAR(20),
    address VARCHAR(50),
    CONSTRAINT PK_SUPPLIERS PRIMARY KEY (id_supplier),
    CONSTRAINT NN_SUPPLIERS_first_name CHECK (first_name IS NOT NULL),
    CONSTRAINT NN_SUPPLIERS_contact CHECK (contact IS NOT NULL),
    CONSTRAINT NN_SUPPLIERS_address CHECK (address IS NOT NULL)
);


--Table 11: STATES
CREATE TABLE DIAMOND.STATES (
    id_state VARCHAR(3),
    name VARCHAR(40),
	id_city VARCHAR(3),
    CONSTRAINT PK_STATES PRIMARY KEY (id_state),
    CONSTRAINT NN_STATES_name CHECK (name IS NOT NULL),
	CONSTRAINT NN_STATES_id_city CHECK (id_city IS NOT NULL),
	CONSTRAINT FK_STATES_CITIES FOREIGN KEY (id_city)
	REFERENCES DIAMOND.CITIES (id_city)
);








-- Tabla 3: PRODUCTS
CREATE TABLE DIAMOND.PRODUCTS (
    id_product VARCHAR(4),
    name VARCHAR(40),
    current_price NUMERIC,
    description VARCHAR(100),
    type VARCHAR(40),
    stock INTEGER,
    stock_min INTEGER,
    stock_max INTEGER,
    id_customer VARCHAR(4),
    id_regular VARCHAR(4),
    id_promotion VARCHAR(4),
    CONSTRAINT PK_PRODUCTS PRIMARY KEY (id_product),
    CONSTRAINT NN_PRODUCTS_name CHECK (name IS NOT NULL),
    CONSTRAINT NN_PRODUCTS_current_price CHECK (current_price IS NOT NULL),
    CONSTRAINT NN_PRODUCTS_stock CHECK (stock IS NOT NULL),
    CONSTRAINT NN_PRODUCTS_stock_min CHECK (stock_min IS NOT NULL),
    CONSTRAINT NN_PRODUCTS_stock_max CHECK (stock_max IS NOT NULL),
    CONSTRAINT FK_PRODUCTS_CUSTOMERS FOREIGN KEY (id_customer)
        REFERENCES DIAMOND.CUSTOMERS (id_customer),
    CONSTRAINT FK_PRODUCTS_REGULARS FOREIGN KEY (id_regular)
        REFERENCES DIAMOND.REGULARS (id_regular),
    CONSTRAINT FK_PRODUCTS_PROMOTIONS FOREIGN KEY (id_promotion)
        REFERENCES DIAMOND.PROMOTIONS (id_promotion)
);


-- Tabla 4: INVOICE_SALES
CREATE TABLE DIAMOND.INVOICE_SALES (
    id_invoice_sale VARCHAR(4),
    date DATE,
    details_invoice VARCHAR(100),
    total NUMERIC,
    id_customer VARCHAR(4),
    id_payment_type VARCHAR(2),
    id_line_item VARCHAR(4),
    CONSTRAINT PK_INVOICE_SALES PRIMARY KEY (id_invoice_sale),
    CONSTRAINT NN_INVOICE_SALES_date CHECK (date IS NOT NULL),
    CONSTRAINT NN_INVOICE_SALES_total CHECK (total IS NOT NULL),
    CONSTRAINT NN_INVOICE_SALES_id_customer CHECK (id_customer IS NOT NULL),
    CONSTRAINT NN_INVOICE_SALES_id_payment_type CHECK (id_payment_type IS NOT NULL),
    CONSTRAINT NN_INVOICE_SALES_id_line_item CHECK (id_line_item IS NOT NULL),
    CONSTRAINT FK_INVOICE_SALES_CUSTOMERS FOREIGN KEY (id_customer)
        REFERENCES DIAMOND.CUSTOMERS (id_customer),
    CONSTRAINT FK_INVOICE_SALES_PAYMENT_TYPES FOREIGN KEY (id_payment_type)
        REFERENCES DIAMOND.PAYMENT_TYPES (id_payment_type),
    CONSTRAINT FK_INVOICE_SALES_EMPLOYEES FOREIGN KEY (id_line_item)
        REFERENCES DIAMOND.EMPLOYEES (id_line_item)
);



--Table 5:DETAILS_INVOICE_SALES 
CREATE TABLE DIAMOND.DETAILS_INVOICE_SALES(
    id_details_invoice_sale VARCHAR(4),
    quantity INTEGER,
    unit_price NUMERIC,
    discount NUMERIC,
    subtotal NUMERIC,
    id_invoice_sale VARCHAR(4),
    id_product VARCHAR(4),
    CONSTRAINT PK_DETAILS_INVOICE_SALES PRIMARY KEY(id_details_invoice_sale),
    CONSTRAINT NN_DETAILS_INVOICE_SALES_QUANTITY CHECK (quantity IS NOT NULL),
    CONSTRAINT NN_DETAILS_INVOICE_SALES_PRICE CHECK (unit_price IS NOT NULL),
    CONSTRAINT NN_DETAILS_INVOICE_SALES_DISCOUNT CHECK (discount IS NOT NULL),
    CONSTRAINT NN_DETAILS_INVOICE_SALES_SUBTOTAL CHECK (subtotal IS NOT NULL),
    CONSTRAINT NN_DETAILS_INVOICE_SALES_INVOICE_SALE CHECK (id_invoice_sale IS NOT NULL),
    CONSTRAINT NN_DETAILS_INVOICE_SALES_PRODUCT CHECK (id_product IS NOT NULL),
    CONSTRAINT FK_DETAILS_INVOICE_SALES_INVOICE_SALE FOREIGN KEY(id_invoice_sale)
    REFERENCES DIAMOND.INVOICE_SALES(id_invoice_sale),
    CONSTRAINT FK_DETAILS_INVOICE_SALES_PRODUCT FOREIGN KEY (id_product)
    REFERENCES DIAMOND.PRODUCTS(id_product)
);


--Tabla 7: SHIPPINGS
CREATE TABLE DIAMOND.SHIPPINGS(
    id_shipping VARCHAR(4),
    date DATE,
    delivery_address VARCHAR(100),
    shipping_cost NUMERIC,
    status CHAR(1),
    id_invoice_sale VARCHAR(4),
    id_state VARCHAR(3),
    CONSTRAINT PK_SHIPPINGS PRIMARY KEY(id_shipping),
    CONSTRAINT NN_SHIPPINGS_DATE CHECK (date IS NOT NULL),
    CONSTRAINT NN_SHIPPINGS_DELIVERY_ADDRESS CHECK (delivery_address IS NOT NULL),
    CONSTRAINT NN_SHIPPINGS_SHIPPING_COST CHECK (shipping_cost IS NOT NULL),
    CONSTRAINT NN_SHIPPINGS_STATUS CHECK (status IS NOT NULL),
    CONSTRAINT NN_SHIPPINGS_INVOICE_SALE CHECK (id_invoice_sale IS NOT NULL),
    CONSTRAINT NN_SHIPPINGS_STATES CHECK (id_state IS NOT NULL),
    CONSTRAINT FK_SHIPPINGS_INVOICE_SALE FOREIGN KEY(id_invoice_sale)
    REFERENCES DIAMOND.INVOICE_SALES(id_invoice_sale),
    CONSTRAINT FK_SHIPPINGS_STATES FOREIGN KEY (id_state)
    REFERENCES DIAMOND.STATES(id_state)
);


-- Tabla 13: INVOICE_SUPPLIERS
CREATE TABLE DIAMOND.INVOICE_SUPPLIERS(
    id_invoice_supplier VARCHAR(20),
    date DATE,
    details_invoice VARCHAR(100),
    total NUMERIC,
    id_supplier VARCHAR(4),
    CONSTRAINT PK_INVOICE_SUPPLIERS PRIMARY KEY(id_invoice_supplier),
    CONSTRAINT NN_INVOICE_SUPPLIERS_DATE CHECK (date IS NOT NULL),
    CONSTRAINT NN_INVOICE_SUPPLIERS_TOTAL CHECK (total IS NOT NULL),
    CONSTRAINT NN_INVOICE_SUPPLIERS_SUPPLIER_ID CHECK (id_supplier IS NOT NULL),
    CONSTRAINT FK_INVOICE_SUPPLIERS_SUPPLIER_ID FOREIGN KEY(id_supplier)
    REFERENCES DIAMOND.SUPPLIERS(id_supplier)
);


--Tabla 14: DETAILS_INVOICE_SUPPLIERS
CREATE TABLE DIAMOND.DETAILS_INVOICE_SUPPLIERS(
    id_line_item VARCHAR(4),
    quantity INTEGER,
    unit_price NUMERIC,
    discount NUMERIC,
    subtotal NUMERIC,
    id_invoice_supplier VARCHAR(20),
    id_product VARCHAR(4),
    CONSTRAINT PK_DETAILS_INVOICE_SUPPLIERS PRIMARY KEY (id_line_item),
    CONSTRAINT NN_DETAILS_INVOICE_SUPPLIERS_QUANTITY CHECK (quantity IS NOT NULL),
    CONSTRAINT NN_DETAILS_INVOICE_SUPPLIERS_PRICE CHECK (unit_price IS NOT NULL),
    CONSTRAINT NN_DETAILS_INVOICE_SUPPLIERS_INVOICE_SUPPLIER CHECK (id_invoice_supplier IS NOT NULL),
    CONSTRAINT NN_DETAILS_INVOICE_SUPPLIERS_PRODUCT CHECK (id_product IS NOT NULL),
    CONSTRAINT FK_DETAILS_INVOICE_SUPPLIERS_INVOICE_SUPPLIER FOREIGN KEY(id_invoice_supplier)
    REFERENCES DIAMOND.INVOICE_SUPPLIERS(id_invoice_supplier),
    CONSTRAINT FK_DETAILS_INVOICE_SUPPLIERS_PRODUCT FOREIGN KEY(id_product)
    REFERENCES DIAMOND.PRODUCTS(id_product)
);